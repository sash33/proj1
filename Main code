#include<stdio.h>
#include<unistd.h>  //included to use sizeof function to find size of an array
#include<string.h>
/*By Sascha Keats  c3305350
The code can run various functions performing encryption and decryption tasks.
The menu indicates which number shoudl entered to select different functions of the program,
for example to select rotation encryption, user should enter: 1
The flow of the program is controlled through a menu that is run in a while loop with different switch cases calling different functions.
*/

char rotationEnc(char letter, int key);
char rotationDec(char letter, int key);
char substitutionEnc(char letter);
char substitutionDec(char letter);
void rotNoKeyDec(char *message);

int setKey();
char makeUpper(char letter);


int main(){
int choice=0;//this variable declared will be used to control the menu.
int key=0; //declares the key variable to store the integer that will be used in various functions.

//CHANGE this array message to enter the text for every task exccept rotation decryption without a key, where the text is entered in the function!
char message[] = "TVU TVAOTH: AOL KHAH IYVBNOA AV BZ IF AOL IVAOHU ZWPLZ WPUWVPUAZ AOL LEHJA SVJHAPVU VM AOL LTWLYVY'Z ULD IHAASL ZAHAPVU. DL HSZV RUVD AOHA AOL DLHWVU ZFZALTZ VM AOPZ KLHAO ZAHY HYL UVA FLA VWLYHAPVUHS. DPAO AOL PTWLYPHS MSLLA ZWYLHK AOYVBNOVBA AOL NHSHEF PU H CHPU LMMVYA AV LUNHNL BZ, PA PZ YLSHAPCLSF BUWYVALJALK. IBA TVZA PTWVYAHUA VM HSS, DL'CL SLHYULK AOHA AOL LTWLYVY OPTZLSM PZ WLYZVUHSSF VCLYZLLPUN AOL MPUHS ZAHNLZ VM AOL JVUZAYBJAPVU VM AOPZ KLHAO ZAHY. THUF IVAOHUZ KPLK AV IYPUN BZ AOPZ PUMVYTHAPVU. ";//array contains the message to be used in each function.

int size = sizeof(message)-1;//calculates the size of the message array. This is used to control for loops.

//Sanitise the message to make UPPER case
for(int i=0; i<size;i++){ //for loop runs as many times as the indexes in the message array                 
    makeUpper(message[i]); //calls the makeUpper function to convert lower case to upper case
}


while(choice!=5){//while loop repeats the menu after each selection until the user enters '6, which exits the loop
    //printf("\nPlease enter a number to select an option");
    printf("\n**************************************************************************************");
    printf("\n 1- rotation encription.       2- substitution encription    3- rotation decrypt");
    printf("\n 4- substitution decryption     5- rotation without key   6-quit");
    printf("\n**************************************************************************************");
    
    scanf("%d ", &choice);//takes the user input and stores it in the choice variable
    printf("\nYour choice is : %d\n", choice);


    switch(choice){//switch case is used to select different functions according to the value of choice.
        case 1: //calling rotationEnc function
            key = setKey();//calls the setKet funciton to store an integer in the variable key
            
            for(int i=0; i<size;i++) { //runs the loop as many times as there are indexes in the message array
                    
                if (message[i] <= 'Z' && message[i] >= 'A') { //executes if the index of message is between A and Z. 
                    printf("%c", rotationEnc(message[i], key)); 
                }else{
                    printf("%c", message [i]); //if there are non letter values it simply prints them at the index instead of them being passed into the function
                }  
            }
            break;

        case 2: //calling substitutionEnc
            for(int i=0; i<=size; i++){ //runs for the size of message
                printf("%c ", substitutionEnc(message[i]));  //prints the return of the function
            }
            
            break;
            
        case 3: //calling rotationDec
            //printf("enter the key"); //Asks the user to enter a key
            //scanf("%d", &key);
            //key = 19;//
            key=setKey();
            for(int i=0; i<size; i++){
                if (message[i] <= 'Z' && message[i] >= 'A') {  //if the index value is a letter, the index value is passed into the function
                    printf("%c", rotationEnc(message[i], key));
                }else{
                    printf("%c", message[i]);  //prints the value if it is not a letter
                }  
            }
            break;
            
        case 4: //calling substitutionDec
        for(int i=0; i<=size;i++){
            printf("%c", substitutionDec(message[i]));
        }
       
            break;
            
        case 5://rotation dec without key
        rotNoKeyDec(message);
            
            break;
            
        case 6:
        return 0;  //if the user enters '6', the programs exists
    }
}

return 0; 
} 
/************Make the message upper case**************************/

char makeUpper(char letter){ //function prototype
    if (letter>=97 && letter<=122) {  //if the letter is not an upper case letter...
        letter -= 32;                 //the letter is converted to upper case by minusing 32 from its value
    }
    return letter;  //returns the calculated letter as a char
}
    
/********SET KEY**************************************************/

/*Function takes no input
It return an key as an integer.
This function relies on the platform runing it being able to enter a key inside a function correctly.
*/
int setKey(){
    int key;
    printf("\nEnter key: ");
    scanf("%d ", &key);//need the & symbol?
    printf("the key entered was: %d\n", key);
return key;
}



/*****FUNCTION for rotation encryption****************************/ 

/*This rotation function takes a single letter at one time to encrypt it. It also takes an integer key as input.
The return value of the function is a character each time it is called.
The function takes a character, rotates it according to the entered key and returns the new character produced.
The function can take negative keys, despite it not needing to be able to.
*/
char rotationEnc(char letter, int key) {
        
        if(letter == 32){ //if statements checks if the letter is a white space
            letter = 32;  //whitespace remains unchanged
        }else if(letter + key >= 'A' && letter + key <= 'Z'){ //if the letter is between A and Z, it is shifted according to the key
            letter += key;

        }else if(letter + key > 'Z'){  //if the letter plus the key is greater than Z it is rotated back to A and or higher
            letter += key - 26;

        }else{ //accounts for the key being negative
            letter += key + 26;
        }

return letter;
}

/****Function for rotation decryption****************************/

/*Rotation decryption takes a char letter and int key as input.
It return a letter with datatype character
The function recieves an encrypted message one letter at a time and rotates the letter according to the key given.
The function can only take a character from an array of chars one at a time, the text must be entered into the array itself.
*/
char rotationDec(char letter, int key){//takes the index of the message array and the key
    //
    
    if(letter == 32){
            letter = 32;      
        }else if(letter + key >= 'A' && letter + key <= 'Z'){
            letter += key;

        }else if(letter + key > 'Z'){
            letter += key - 26;

        }else{
            letter += key + 26;
        }

return letter;
    
}

/*****Function for substitution encription***********************/

/*The function takes a character letter as input.
The function return a character.
The function substitutes a given letter with a new set letter for each position of the alphabet.
The function can only take char values and each key must be manually entered inside the function itself.
The function must be run in a for loop to substitute a full text
*/
char substitutionEnc(char letter){
char k[26] ="BCDEFGHIJKLMNOPQRSTUVWXYZA"; //this array is used to select and modify each key for every letter in the alphabet. Array index 0 will be the letter that A becomes.
switch(letter){//the letter is used in the switch statement to select the key that it is assigned to
    case 65: letter = k[0]; break; //each case contains every letter in the alphabet from A(65) to Z(90)
    case 66: letter = k[1]; break; //if the case is matches the letter, then the letter is changed to the pre-assigned key
    case 67: letter = k[2]; break;
    case 68: letter = k[3]; break;
    case 69: letter = k[4]; break;
    case 70: letter = k[5]; break;
    case 71: letter = k[6]; break;
    case 72: letter = k[7]; break;
    case 73: letter = k[8]; break;
    case 74: letter = k[9]; break;
    case 75: letter = k[10]; break;
    case 76: letter = k[11]; break;
    case 77: letter = k[12]; break;
    case 78: letter = k[13]; break;
    case 79: letter = k[14]; break;
    case 80: letter = k[15]; break;
    case 81: letter = k[16]; break;
    case 82: letter = k[17]; break;
    case 83: letter = k[18]; break;
    case 84: letter = k[19]; break;
    case 85: letter = k[20]; break;
    case 86: letter = k[21]; break;
    case 87: letter = k[22]; break;
    case 88: letter = k[23]; break;
    case 89: letter = k[24]; break;
    case 90: letter = k[25]; break;
} 

return letter;
}


/*****Function for substitution encription***********************/

char substitutionDec(char letter){

char k[26] ="ABCDEFGHIJKLMNOPQRSTUVWXYZ";

switch(letter){//the letter is used in the switch statement to select the key that it is assigned to
    case 65: letter = k[0]; break; //each case contains every letter in the alphabet from A(65) to Z(90)
    case 66: letter = k[1]; break; //if the case is matches the letter, then the letter is changed to the pre-assigned key
    case 67: letter = k[2]; break;
    case 68: letter = k[3]; break;
    case 69: letter = k[4]; break;
    case 70: letter = k[5]; break;
    case 71: letter = k[6]; break;
    case 72: letter = k[7]; break;
    case 73: letter = k[8]; break;
    case 74: letter = k[9]; break;
    case 75: letter = k[10]; break;
    case 76: letter = k[11]; break;
    case 77: letter = k[12]; break;
    case 78: letter = k[13]; break;
    case 79: letter = k[14]; break;
    case 80: letter = k[15]; break;
    case 81: letter = k[16]; break;
    case 82: letter = k[17]; break;
    case 83: letter = k[18]; break;
    case 84: letter = k[19]; break;
    case 85: letter = k[20]; break;
    case 86: letter = k[21]; break;
    case 87: letter = k[22]; break;
    case 88: letter = k[23]; break;
    case 89: letter = k[24]; break;
    case 90: letter = k[25]; break;
} 

return letter;
}  



/*****************Rotation decription without key************************/

/*The rotation without a key takes a reference to the message in the main body.
The function returns an integer key.
The function first calculates which letter is the most prevalent in the array, it then assumes a letter that the most common letter could be.
It calculates a key based on the distance of the most common letter and the assumed decrypted letter. 
For example, it calculates the distance from E that the most used encrypted letter is.
The message is then rotated by calling the rotation function with the key that was calculated.
The array produced is then searched for english words such as 'the' with a white space after it and 'a' with white spaces before and after it.
If two or more of the tests are passed, the key is assumed to be correct and it is returned. If the tests are not passed the function assumes
a new letter instead of 'E', 'A', for example.
Some limitations of the function are that the correct key may not be found because if none of the words that are tested for are in the 
text tested, the function will continue to search. Further, the message must be entered into the function itself.
*/
void rotNoKeyDec(char *message){


//char alphabet[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"; //alphabet array used for debugging
int size = strlen(message); //calculates size of the message array
int quantityArray[25]; //array stores how many times each letter of the alphabet is used in the message array
int sizeCheck=0; //array to find the highest number in the message array 
int times=0;
int c=0; //is used to increment quantityArray and the alphabet array
int key; //key stores the key that is being tested
char mostUsedLetter; //stores the letter that is most used in the encrypted text as a character
char alphaTest='A'; // variable incremented to test each letter of the alphabet
char engTest[size]; //stores the rotated text to then be tested for english words
int i=0; //increments the main for loop 
int wordCheck = 0; //used to count how many english word tests have been completed
char letterTest[] = "ETAOI"; //this array is used to store each letter that will be assumed to be the most prevalent in the english decrypted text
 
    for(int a=1; a<=26; a++){//runs for each letter of the alphabet
       
        times=0;//should reset to 0...
       
        for(int b=0; b<=size; b++){
            if(message[b] == alphaTest){//if the letter is found in the alphabet...
                times++;    //increment the times variable
            }
        }
   
        quantityArray[c] = times;//stores times in quantityarray to compare each index of quantityarray later
        //printf("\n%d", quantityArray[c]);//for debugging
        //printf(" %c", alphabet[c]);//alphabet printed to help debug
        c++; //increment quantity array to store next times in the next index
        alphaTest++; //increment alphabet test to test for the next letter in the alphabet
    }
    
    sizeCheck = quantityArray[0]; //to find the most used letter, code assumes quantity array 0 is the highest and checks each index after that
 
    for(int i=0; i<26;i++){//finding the most used letter
       if(quantityArray[i]>=sizeCheck && quantityArray[i] != 32){ //compares the next index of quantityArray to sizecheck...
          sizeCheck = quantityArray[i]; //if it is bigger, then that index becomes the new sizeCheck or the new most used letter
           mostUsedLetter = i+'A'; //converts the index (i) to letter form by adding 'A', this is then stored in mostUsedLetter
       }
    }

printf("\nthe most used letter is:%c", mostUsedLetter);
 
for(int s=0;s<=4;s++){//this runs through each letter in letterTest to decrypt the text from the most used encrypted letter to the letter test which is assumed
key=letterTest[s]-mostUsedLetter; //the key is calculated by finding the distance between letterTest and mostUsedLetter (in encrypted text)

printf("\nThe key # being tested is:%d\n", key);

for (i=0; i<size; i++) { //increments for the size of the message

    if(engTest[i]>='A' && engTest[i]<='Z'){
        
        engTest[i] = rotationEnc(message[i], key);//why two semi-colons!!!!!!!
    }else{
        engTest[i] = message[i];
    }
    printf("%c", engTest[i]);
    
}
       
//Look for THE

    for(int i=0;i<size;i++){
        
      if(engTest[i]=='T'){//searches for T
        i++; //inncrements index to search for the next one along the array
        if(engTest[i]=='H'){//searches for H
          i++;
          if(engTest[i]=='E'){//searches for E
            i++;
                }if(engTest[i]==32/*||check for other white space engTest[i]*/){//searches for a white space
              
              //printf("\nTHE has been found now breaking..."); for debugging
              wordCheck++;//test successful if code gets here so increment wordCheck
              break; //NEED THE BREAK?
          }
        }
      }
   
    }
   
    for(int i=0;i<size;i++){
      if(engTest[i]=='T'){ //Finds T
        i++; //increments to check next index
       
        if(engTest[i]=='O'){ //finds O
          i++;
           
            if(engTest[i]==32){ //searches for white space
              //printf("\nTO has been found now breaking");  print statement for debugging
              wordCheck++; //increments word check to indicate the test has been successful
              break;
          }
        }
      }
    }
   
   for(int i=0;i<size;i++){
      if(engTest[i]=='B'){ //Finds T
        i++; //increments to check next index
       
        if(engTest[i]=='E'){ //finds O
          i++;
           
            if(engTest[i]==32){ //searches for white space
              //printf("\nBE has been found now breaking");  //print statement for debugging
              wordCheck++; //increments word check to indicate the test has been successful
              break;
          }
        }
      }
    }
    for(int i=0;i<size;i++){
      if(engTest[i]==32){ 
        i++;
       
        if(engTest[i]=='A'){
          i++;
            
            if(engTest[i]==32){
              //printf("\nA has been found now breaking"); //print statement for debugging
              wordCheck++;
              break;
          }
        }
      }
    }
    
    if(wordCheck>=2){ //if two or more tests have been passed, the key is correct
        //printf("\nThe key of: %d is correct!!!", key);
        //return key;//return the key 
        break;
    }
    
}
printf("\nThe decrypted text^\n");

}
