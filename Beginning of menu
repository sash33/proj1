#include<stdio.h>
#include<unistd.h>
/*talk about code author etc
 * 
 * 
 * 
 */
char rotationEnc(char letter, int key);
char substitutionEnc(char letter);
char rotationDec(char letter, int key);
int setKey();
char makeUpper(char letter);

int rotNoKeyDec();

int main(){
int choice=0;
int key=0;
printf("WELCOME TO SOME INTERESTING CIPHERS - I HOPE YOU ENJOY!");
//User input for message into array
char message[] = "TVU TVAOTH: AOL. KHAH IYVBNOA AV BZ IF AOL IVAOHU ZWPLZ WPUWVPUAZ AOL ";

int size = sizeof(message)-1;     

//Sanitise to make UPPER case
for(int i=0; i<size;i++){                    
    makeUpper(message[i]);
}
//sanitising emessage
for(int i=0; i<size;i++){                    
    makeUpper(message[i]);
}

while(choice!=5){
    //printf("\nPlease enter a number to select an option");
    printf("\n**************************************************************************************");
    printf("\n 1- rotation encription.       2- substitution encription    3- rotation decrypt");
    printf("\n 4- substitution decryption     5- rotation without key ");
    printf("\n**************************************************************************************");
    
    scanf("%d ", &choice);
    printf("\nYour choice is : %d\n", choice);


    switch(choice){
        case 1: //calling rotationEnc     THE ENCRYPTED MESSAGE SHOULD BE STORED IN emessage INSTEAD OF BEING PRINTED
            key = setKey();
            
            for(int i=0; i<size;i++) {
                    
                if (message[i] <= 'Z' && message[i] >= 'A') {
                    printf("%c", rotationEnc(message[i], key));
                }else{
                    printf("%c", message [i]);
                }  
            }
            break;

        case 2: //calling substitutionEnc
            for(int i=0; i<=size; i++){//size of what?
                printf("%c ", substitutionEnc(message[i]));
            }
            
            break;
            
        case 3:; //calling rotationDec
            printf("enter the key");
            scanf("%d", &key);
            //key = 19;//setKey();
            for(int i=0; i<size; i++){
                if (message[i] <= 'Z' && message[i] >= 'A') {
                    printf("%c", rotationEnc(message[i], key));
                }else{
                    printf("%c", message[i]);
                }  
            }
            break;
            
        case 4: //calling substitutionDec
        
        
        
            break;
            
        case 5://rotation dec without key
        printf("\nThe key is: %d", rotNoKeyDec());
            
            break;
            
        case 6:
        return 0;
    }
}

return 0;
} 
/************Make the message upper case**************************/

char makeUpper(char letter){
    if (letter>=97 && letter<=122) {
        letter -= 32; 
    }
    return letter;
}
    
/********SET KEY**************************************************/
int setKey(){
    int key;
    printf("\nEnter key: ");
    scanf("%d ", &key);
return key;
}



/*****FUNCTION for rotation encryption****************************/ 
char rotationEnc(char letter, int key) {
        
        if(letter == 32){
            letter = 32;      
        }else if(letter + key >= 'A' && letter + key <= 'Z'){
            letter += key;

        }else if(letter + key > 'Z'){
            letter += key - 26;

        }else{
            letter += key + 26;
        }

return letter;
}

/****Function for rotation decryption****************************/
char rotationDec(char letter, int key){
    //should work off emessage and take the old or new key?
    
    if(letter == 32){
            letter = 32;      
        }else if(letter + key >= 'A' && letter + key <= 'Z'){
            letter += key;

        }else if(letter + key > 'Z'){
            letter += key - 26;

        }else{
            letter += key + 26;
        }

return letter;
    
}

/*****Function for substitution encription***********************/
char substitutionEnc(char letter){
    
switch(letter){
    case 65: letter = 66; break;
    case 66: letter = 67; break;
    case 67: letter = 68; break;
    case 68: letter = 69; break;
    case 69: letter = 70; break;
    case 70: letter = 71; break;
    case 71: letter = 72; break;
    case 72: letter = 73; break;
    case 73: letter = 74; break;
    case 74: letter = 75; break;
    case 75: letter = 76; break;
    case 76: letter = 77; break;
    case 77: letter = 89; break;
    case 78: letter = 69; break;
    case 79: letter = 69; break;
    case 80: letter = 70; break;
    case 81: letter = 70; break;
    case 82: letter = 70; break;
    case 83: letter = 67; break;
    case 84: letter = 89; break;
    case 85: letter = 87; break;
    case 86: letter = 80; break;
    case 87: letter = 89; break;
    case 88: letter = 90; break;
    case 89: letter = 89; break;
    case 90: letter = 69; break;
} 

return letter;
}

/*****************Rotation decription without key************************/

int rotNoKeyDec(){
//ask user for the message function
char message[] = "TVU TVAOTH: AOL. KHAH IYVBNOA AV T BZ IF AOL L IVAOHU ZWPLZ WPUWVPUAZ AOL ";
//scanf
//scanf("%[^\n]", message);
char alphabet[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
int size = sizeof(message)-1;
int quantityArray[25];
int sizeCheck=0;
int times=0;
int c=0;
char mostUsedLetter;
int key;
char alphaTest='A';
char engTest[size];
int i=0;
int wordCheck = 0;
char letterTest[] = "ETAOI";
 
    for(int a=1; a<=26;a++){
       
        times=0;//should reset to 0...
       
        for(int b=0; b<=size; b++){
            if(message[b] == alphaTest){
                times++;
            }
        }
   
    quantityArray[c] = times;
    printf("\n%d", quantityArray[c]);
    printf(" %c", alphabet[c]);
    c++;
    alphaTest++;
    }
    sizeCheck = quantityArray[0];
 
    for(int i=0; i<26;i++){//finding the most used letter
       if(quantityArray[i]>=sizeCheck && quantityArray[i] != 32){
          sizeCheck = quantityArray[i];
           mostUsedLetter = i+'A';
       }
    }

printf("\nthe most used letter is:%c", mostUsedLetter);
 
for(int s=0;s<=4;s++){//this runs through each letter in letter test so decrypt the text from the most used letter to the letter test
key=letterTest[s]-mostUsedLetter; 

printf("\nThe key # being tested is:%d\n", key);

for (i=0; i<size; i++) { 
    
    engTest[i] = rotationEnc(message[i], key);;
    printf("%c", engTest[i]);
}
       
//Look for THE
//char word[3] = "THE";
    //printf("the key shift to be tested is: %s", engtest);
    for(int i=0;i<size;i++){
 //printf("looking for THE");
      if(engTest[i]=='T'){//finds THE with white space after
        i++;
        //printf("Looking for T");
        if(engTest[i]=='H'){
          i++;
          if(engTest[i]=='E'){
            i++;
           //printf("\nfound E");
          }if(engTest[i]==32/*||check for other white space engTest[i]*/){
              
              printf("\nTHE has been found now breaking...");
              wordCheck++;
              break;
          }
        }
      }
   
    }
   
    for(int i=0;i<size;i++){
      if(engTest[i]=='T'){
        i++;
       
        if(engTest[i]=='O'){
          i++;
           
            if(engTest[i]==32){
              printf("\nTO has been found now breaking");
              wordCheck++;
              break;
          }
        }
      }
    }
   
    for(int i=0;i<size;i++){
      if(engTest[i]==32){
        i++;
       
        if(engTest[i]=='A'){
          i++;
            
            if(engTest[i]==32){
              //printf("\nA has been found with whitespaces now breaking...");
              wordCheck++;
              break;
          }
        }
      }
    }
    if(wordCheck>=2){
        //printf("\nThe key of: %d is correct!!!", key);
        return key;
        break; 
    }
    
    //return would go here
  //return key;
  }
  return key;
  }
